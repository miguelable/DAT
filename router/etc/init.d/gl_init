#!/bin/sh /etc/rc.common
. /lib/functions/gl_util.sh

START=10

ddns=
mac=
nand=
model=
first_time=

model=$(get_model)

check_firstime(){
	case "$model" in
		"mv1000" |\
		"b2200")
			[ ! -f "/etc/config/.first" ] && {
				first_time=yes
				touch /etc/config/.first
				touch /tmp/first_time
				return
			}
			;;
		*)
	esac

	old_ssid=$(uci get wireless.@wifi-iface[0].ssid 2>/dev/null)
	old_mode=$(uci get wireless.@wifi-iface[0].mode 2>/dev/null)

	#set the default wireless config, only if not reserved config when update firmware
	if [ "$old_mode" = "ap" ] && ( [ -z "$old_ssid" ] || [ "$old_ssid" = "GL" ] || [ "$old_ssid" = "OpenWrt" ] || [ "$old_ssid" = "LEDE" ] || [ "$old_ssid" = "mt7615e5" ])
	then
		first_time=yes
		touch /tmp/first_time
	fi
}

# check is firstime starup
is_firstime_starup() {
	[ -f "/etc/rc.d/S10gl_init" ] && echo "yes"
}

is_partial_upgrade() {
	local partial_upgrade
	partial_upgrade=$(glconfig.general.partial_upgrade)
	[ "$partial_upgrade" = "1" ] && {
		uci delete glconfig.general.partial_upgrade
		uci commit glconfig
		echo "yes"
	}
}

read_factory_data() {
	#get basic device information

	model=$(get_model)
	model=$(echo $model | awk '{ print toupper($1); }')
	mac=$(get_ssid_suffix)
	ddns=$(get_default_sn)
	nand=$(cat /proc/mounts |grep 'ubi0_1.*overlay')
}

#read_factory_data(){
#	#get basic device information
#	model=$(awk -F': ' '/machine/ {print tolower($NF)}' /proc/cpuinfo |cut -d- -f2-)
#	[ -n "$(grep "Domino Pi" /proc/cpuinfo)" ] && model="domino"
#	[ -n "$(grep "DK01" /proc/device-tree/model)" ] && model="b1300"
#	[ -n "$(grep "DK04" /proc/device-tree/model)" ] && model="s1300"
#
#	if [ "$model" = "connect inet v1" ]; then
#		model="iNet"
#		ddns=$(dd if=/dev/mtd0 bs=1 skip=$((0x1fc10)) count=7 2>/dev/null)
#	elif [ "$model" = "ar150" ] || [ "$model" = "domino" ] || [ "$model" = "ar300" ] \
#		|| [ "$model" = "ar300m" ] || [ "$model" = "x750" ] || [ "$model" = "ar750" ] \
#		|| [ "$model" = "ar750s" ] || [ "$model" = "mifi" ] || [ "$model" = "usb150" ] \
#		|| [ "$model" = "x1200" ] || [ "$model" = "e750" ]; then
#		nand=$(cat /proc/mounts |grep 'ubi0_1.*overlay')
#		art_mtd=$(cat /proc/mtd | awk -F: '/art/{print $1}')
#		ddns=$(dd if=/dev/$art_mtd bs=1 skip=$((0x10)) count=7 2>/dev/null)
#	elif [ "$model" = "mt300a" ] || [ "$model" = "mt300n" ] || [ "$model" = "mt750" ] || [ "$model" = "mt300n-v2" ] || [ "$model" = "vixmini" ]; then
#		ddns=$(dd if=/dev/mtd2 bs=1 skip=$((0x4010)) count=7 2>/dev/null)
#	elif [ "$model" = "b1300" ] || [ "$model" = "s1300" ]; then
#		art_mtd=$(cat /proc/mtd | awk -F: '/0:ART/{print $1}')
#		ddns=$(dd if=/dev/$art_mtd bs=1 skip=$((0x10)) count=7 2>/dev/null)
#		mac_byte5=$(dd if=/dev/$art_mtd bs=1 skip=4 count=1  2>/dev/null | hexdump -e '"%02X"')
#		mac_byte6=$(dd if=/dev/$art_mtd bs=1 skip=5 count=1  2>/dev/null | hexdump -e '"%02X"')
#	fi
#	letter0=$(printf "%x" "'${ddns:0:1}")
#	letter5=$(printf "%x" "'${ddns:5:1}")
#
#	if [ "$letter0" = "ff" ]; then
#		mac=DEADBEEF
#	elif [ "$letter5" = "ff" ]; then
#		mac=${ddns:2:3}
#	else
#		mac=${ddns:4:3}
#	fi
#
#	[ "$model" = "b1300" ] && mac=${mac_byte5:1:1}${mac_byte6}
#
#	#upper case all model
#	if [ "$model" != "iNet" ]; then
#		model=$(echo $model | awk '{ print toupper($1); }')
#	fi
#}


fix_ssid_5g(){
	#new ssid format
	ssid_prefix="GL-"${model}
       if [ "$model" = "E750" ];then
               ssid=${ssid_prefix}"-"${mac}
       else
               ssid=${ssid_prefix}"-"${mac}-5G
       fi

	device=$1
	index=$2
	#uci delete wireless.$device.disabled
	uci set wireless.@wifi-iface[$index].ssid=$ssid
	uci set wireless.@wifi-iface[$index].encryption=psk2
	uci set wireless.@wifi-iface[$index].key=goodlife
	uci set wireless.@wifi-iface[$index].disassoc_low_ack=0
	if [ "$model" = "X1200" ];then
		uci set wireless.@wifi-iface[$index].guest=0
	fi

	[ "$model" != "B1300" -a "$model" != "S1300" -a "$model" != "B2200" ] && uci set wireless.@wifi-iface[$index].ifname=wlan$index
	[ "$model" = "MT1300" ] && uci set wireless.@wifi-iface[$index].ifname=ra0
	uci set wireless.@wifi-iface[$index].wds=1
	case "$model" in
		"AR300M")
			uci set wireless.$device.txpower='15'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.noscan='0'
			if [ -z "$nand" ]; then
				uci set wireless.@wifi-iface[$index].ssid=${ssid}-NOR
			fi
			;;
               "E750" )
                       ln -s /usr/bin/ip /usr/sbin/ip
                       uci set wireless.$device.doth='0'
                       uci set wireless.$device.txpower='20'
                       uci set wireless.$device.txpower_max='20'
                       uci set wireless.$device.band='5G'
                       uci set wireless.$device.disabled='0'
                       ;;
		"X750" |\
		"AR750S")
			ln -s /usr/bin/ip /usr/sbin/ip
			uci set wireless.$device.doth='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.noscan='0'
			;;
		"X1200")
			ln -s /usr/bin/ip /usr/sbin/ip
			uci set wireless.$device.doth='0'
			uci set wireless.$device.txpower='23'
			uci set wireless.$device.txpower_max='23'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.noscan='0'
			;;
		"AR750" |\
		"S200")
			ln -s /usr/bin/ip /usr/sbin/ip
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.noscan='0'
			;;
		"MT750")
			uci set wireless.$device.txpower='20'
			;;
		"S1300" |\
		"B1300")
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.noscan='0'
			;;
		"B2200")
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.band='5G'
			;;
		*)
	esac
}

fix_ssid_24g(){
	#new ssid format
	ssid_prefix="GL-"${model}
	[ "$model" = "VIXMINI" ] && ssid_prefix="VIXMINI"
	ssid=${ssid_prefix}"-"${mac}

	[ "$model" = "N300" ] && ssid_prefix="microuter"
	ssid=${ssid_prefix}"-"${mac}

	device=$1
	index=$2

    x300banten=`hexdump -s 0x1020 -n1  -C /dev/mtd2 |sed -n 1p  | awk '{print $2}'`

	[ "$model" != "B1300" -a "$model" != "S1300" -a "$model" != "B2200" ] && uci set wireless.$device.hwmode='11g'
	[ "$model" = "MT1300" ] && uci set wireless.$device.hwmode='11ng'
	uci delete wireless.$device.disabled
	uci set wireless.@wifi-iface[$index].ssid=$ssid
	uci set wireless.@wifi-iface[$index].encryption=psk2
	uci set wireless.@wifi-iface[$index].key=goodlife
	uci set wireless.@wifi-iface[$index].wds=1
	uci set wireless.@wifi-iface[$index].disassoc_low_ack=0

	[ "$model" != "B1300" -a "$model" != "B2200" ] && uci set wireless.@wifi-iface[$index].ifname=wlan$index
	[ "$model" = "MT300N-V2" -o "$model" = "VIXMINI" -o "$model" = "N300" ] && uci set wireless.@wifi-iface[$index].ifname=ra$index
	[ "$model" = "MT1300" ] && uci set wireless.@wifi-iface[$index].ifname=rax0

	case "$model" in
       "X300B")
            if [ "$x300banten" = "33" ]; then
            uci set wireless.$device.txpower_max='23'
            uci set wireless.$device.txpower='23'
            uci set wireless.$device.noscan='0'
            uci set wireless.$device.htmode='HT40'
            uci set wireless.$device.band='2G'
            uci set wireless.$device.disabled='0'
            elif [ "$x300banten" = "11" ]; then
            uci set wireless.$device.txpower_max='20'
            uci set wireless.$device.txpower='20'
            uci set wireless.$device.noscan='0'
            uci set wireless.$device.htmode='HT40'
            uci set wireless.$device.band='2G'
            uci set wireless.$device.disabled='0'
            fi
        ;;
       "E750" )
	   		   uci set wireless.$device.channel='6'
               uci set wireless.$device.txpower_max='23'
               uci set wireless.$device.txpower='23'
               uci set wireless.$device.noscan='0'
               uci set wireless.$device.htmode='HT40'
               uci set wireless.$device.band='2G'
               uci set wireless.$device.disabled='0'
               ;;
        "X750" |\
        "AR750S")
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.disabled='0'
			;;
		"X1200")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.txpower_max='23'
			uci set wireless.$device.txpower='23'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.disabled='0'
			;;
		"XE300")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.txpower_max='23'
			uci set wireless.$device.txpower='23'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.disabled='0'
			;;
		"AR300")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			;;
		"AR300M")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.band='2G'
			if [ -z "$nand" ]; then
				uci set wireless.@wifi-iface[$index].ssid=${ssid}-NOR
			fi
			;;
		"AR150" |\
		"MIFI" |\
		"USB150" |\
		"INET")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='18'
			uci set wireless.$device.txpower_max='18'
			uci set wireless.$device.band='2G'
			;;
		"MT300A" |\
		"MT300N" |\
		"VIXMINI")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.mimops='3'
			uci set wireless.$device.wmm='1'
			uci delete wireless.rai0
			uci delete wireless.mt7610e

			##remove wireless setting in luci##
			sed -i 's/if has_wifi/if fasle/' /usr/lib/lua/luci/controller/admin/network.lua
			;;
		"MT300N-V2")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.country='US'
			uci set wireless.$device.region='0'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.mimops='3'
                        uci set wireless.$device.wmm='1'
			uci delete wireless.rai0
			uci delete wireless.mt7610e

			##remove wireless setting in luci##
			sed -i 's/if has_wifi/if fasle/' /usr/lib/lua/luci/controller/admin/network.lua
			;;
		"N300")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.country='US'
			uci set wireless.$device.region='0'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.mimops='3'
			uci set wireless.$device.wmm='1'

			##remove wireless setting in luci##
			sed -i 's/if has_wifi/if fasle/' /usr/lib/lua/luci/controller/admin/network.lua
			;;
		"MT750")
			uci set wireless.$device.txpower='20'
			;;
		"AR750" |\
		"S200")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.txpower_max='20'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.disabled='0'
			;;
		"S1300" |\
		"B1300")
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.noscan='0'
			;;
		"B2200")
			uci set wireless.$device.disabled='0'
			uci set wireless.$device.band='2G'
			;;
		*)
	esac
}

fix_ssid_router(){
		ssid_prefix="GL-"${model}
		ssid_2G=${ssid_prefix}"-"${mac}
		ssid_5G=${ssid_prefix}"-"${mac}-5G

		uci set wireless.@wifi-iface[0].ssid=$ssid_2G
		uci set wireless.@wifi-iface[0].ssid=$ssid_5G
		uci commit wireless
}

fix_ssid(){
	case "$model" in
		"MV1000")
			return
			;;
		"B2200")
			fix_ssid_router
			return
			;;
		*)
	esac

	i=0
	while [ "$i" -le "10" ]; do
		device=$(uci get wireless.@wifi-iface[$i].device)
		if [ -z "$device" ]; then
			break
		fi
		htmode=$(uci get wireless.$device.htmode)
		hwmode=$(uci get wireless.$device.hwmode)
		if [ "$htmode" = "VHT80" ] || [ "$hwmode" = "11a" ] || [ "$hwmode" = "11ac" ]; then
			fix_ssid_5g $device $i
		else
			fix_ssid_24g $device $i
		fi
		i=$((i+1))
	done
	uci commit wireless
		
	guest_network_init
}

fix_misc(){
    i=0
    while [ "$i" -le "1" ]; do
        zone_name=$(uci get firewall.@zone[$i].name)
        if [ "$zone_name" = "wan" ]; then
            uci set firewall.@zone[$i].input='DROP'
            break
        fi
        i=$((i+1))
    done

	#some settings are not reserved after update firmware, must do the action again
	uci set firewall.@include[0].reload='1'
	uci commit firewall
	case "$model" in
		"E750")
			uci set network.wan=interface
			uci set network.wan.proto=dhcp
			uci commit network
			[ -n "$first_time" ] && {
				uci set glconfig.general.wan2lan='1'
			}
                        uci delete glconfig.modem
                        uci set glconfig.modem=server
                        uci add_list glconfig.modem.bus=1-1.2
                        uci set glconfig.modem.enable_log='0'
                        #uci set glconfig.modem.en_limt='1'
                        #uci set glconfig.modem.tigger='85000'
                        #uci set glconfig.modem.clear='80000'
                        uci commit glconfig
			uci set dhcp.@dnsmasq[0].rebind_protection='0'
			uci commit dhcp
                        ;;
		"MIFI" |\
		"AR750" |\
		"S200" |\
		"X750")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1.2
			uci set glconfig.modem.enable_log='0'
			uci commit glconfig
			;;
		"XE300")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1.2
			uci set glconfig.modem.enable_log='0'
			uci commit glconfig
			[ -d  "/sys/bus/usb/devices/1-1.4/1-1.4:1.0/ttyUSB0/" ] &&  sed -i 's/ttyUSB2/ttyUSB3/g' /etc/smsd.conf
			sed -i '/ln -sf \"\/tmp\/resolv.conf.d\/resolv.conf.auto\" \/tmp\/resolv.conf/d' /etc/init.d/dnsmasq
			;;
		"X1200")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1.2
			uci add_list glconfig.modem.bus=2-1.2
			uci add_list glconfig.modem.bus=1-1.4
			uci set glconfig.modem.enable_log='0'
			uci commit glconfig
			;;
	
		"MT300A"|\
		"MT300N"|\
		"MT300N-V2"|\
		"AR150"|\
		"AR300M"|\
		"X300B"|\
		"AR750S")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1
			uci set glconfig.modem.enable_log='0'
			uci commit glconfig
			;;
		"MT1300")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1
			uci add_list glconfig.modem.bus=2-1
			uci commit glconfig
			;;
		"S1300" |\
		"B1300")
			uci set wireless.@wifi-iface[0].ifname='ath0'
			uci set wireless.@wifi-iface[1].ifname='ath1'
			uci set wireless.@wifi-iface[0].wds=1
			uci set wireless.@wifi-iface[1].wds=1
			uci set wireless.@wifi-iface[0].athnewind=1
			uci set wireless.@wifi-iface[1].athnewind=1
			if [ -z "$(uci -q get wireless.wifi0.htmode)" ]; then
				uci set wireless.wifi0.htmode='HT40'
			fi
			uci set wireless.@wifi-iface[0].disablecoext=1
			uci set wireless.wifi0.band='2G'
			uci set wireless.wifi1.htmode='VHT80'
			uci set wireless.wifi1.band='5G'
			uci set wireless.wifi0.country=$(get_country_code)
			uci set wireless.wifi1.country=$(get_country_code)
			uci commit wireless
			if [ -z "$(uci -q get wireless.wifi0.txpower_max)" -o -z "$(uci -q get wireless.wifi1.txpower_max)" ]; then
				uci set wireless.wifi0.txpower_backup=$(uci -q get wireless.wifi0.txpower)
				uci set wireless.wifi1.txpower_backup=$(uci -q get wireless.wifi1.txpower)
				uci delete wireless.wifi0.txpower
				uci delete wireless.wifi1.txpower
				uci commit wireless
				wifi
			fi
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1
			uci commit glconfig
			if [ -z "$(uci -q get wireless.wifi0.txpower_max)" -o -z "$(uci -q get wireless.wifi1.txpower_max)" ]; then
				/usr/sbin/b1300_misc_func.sh set_max_power &
			fi
			;;
		"B2200")
			uci set wireless.wifi0.country=$(get_country_code)
			uci set wireless.wifi1.country=$(get_country_code)
			uci set wireless.wifi2.country=$(get_country_code)
			uci commit wireless
			;;
		"MV1000")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			if [ -d "/sys/devices/platform/soc/soc:internal-regs@d0000000/d005e000.usb/usb1/1-1/1-1.2/" ];then
				uci add_list glconfig.modem.bus='1-1.1'
			else
				uci add_list glconfig.modem.bus='1-1'
			fi
			uci commit glconfig
			;;
		*)
	esac
}

generate_network_config() {
		. /lib/functions.sh
		. /lib/functions/uci-defaults.sh
		. /lib/functions/system.sh

		# Use as WAN by default, remove lan interface
		uci set network.lan.ifname=''

        uci -q batch <<-EOF
                delete network.lan_dev
                delete network.wan
                set network.wan=interface
                set network.wan.ifname='eth0'
                set network.wan.proto='dhcp'
                add network switch
                set network.@switch[0]=switch
                set network.@switch[0].name='switch0'
                set network.@switch[0].reset='1'
                set network.@switch[0].enable_vlan='0'
		EOF
}

fix_sys(){
	#configure network settings; don't do it when upgraded

	case "$model" in
		"N300"|\
		"VIXMINI")
			generate_network_config
			;;
		"MV1000"|\
		"B2200")
			ssid_prefix="GL-"${model}
			ssid=${ssid_prefix}"-"${mac}
			;;
		*)
			;;
	esac

	uci set network.lan.hostname="$ssid"
	old_wanhost=$(uci get network.wan.hostname)
	old_lanip=$(uci get network.lan.ipaddr)
	if [ -z "$old_wanhost" ]; then
		if [ "$old_wanhost" = $ssid_prefix ] || [ -z "$old_wanhost" ]; then
			uci set network.wan.hostname="$ssid"
		fi
		uci set system.@system[0].hostname="$ssid_prefix"
		[ "$model" = "N300" ] && uci set system.@system[0].hostname="N300"
		uci commit system
		uci set samba.@samba[0].name="$ssid_prefix"
		uci set samba.@samba[0].description="$ssid"
		uci commit samba
		if [ "$old_lanip" = "192.168.1.1" ]; then
			uci set network.lan.ipaddr="192.168.8.1"
		fi
		uci commit network
	fi

	cp /rom/etc/rc.local /etc/
}

fix_led(){
	case "$model" in
		"MT300N-V2")
			wifi_led_dev=$(uci get system.led_wifi_led.dev)
			[ "$wifi_led_dev" != "ra0" ] && {
				uci set system.led_wifi_led.dev='ra0'
				uci commit system
			}
			;;
		"MV1000")
			return
			;;
		*)
			;;
	esac
}

fix_guest_network() {
	case "$model" in
		"MV1000")
			return
			;;
		*)
	esac

	local guest_network=$(uci -q get wireless.guest2g)
	[ -z "$guest_network" ] && guest_network_init
}

fix_board_info() {
	uci set glconfig.general.model=$(get_model)
	uci set glconfig.general.factory_mac=$(get_default_mac_with_colon)
	uci set glconfig.general.factory_sn=$(get_default_sn)
	uci set glconfig.general.factory_ddns=$(get_default_ddns)
	uci commit glconfig
}

fix_minidlna(){                                                                        
        uci set minidlna.config.friendly_name="GL-${model} DLNA Server"
		uci set minidlna.config.enabled='0'
		uci commit minidlna
}

fix_samba(){
#	uci set samba.@samba[0].interface='loopback lan'
#	if [ "$model" != "B2200" ];then
#		uci add samba sambashare
#		uci set samba.@sambashare[0].guest_ok='yes'
#		uci set samba.@sambashare[0].name='GL-Samba'
#		uci set samba.@sambashare[0].path='/mnt'
#		uci set samba.@sambashare[0].read_only='yes'
#	fi
#	uci commit samba
	
	uci set firewall.sambasharewan=rule
	uci set firewall.sambasharewan.src='wan'
	uci set firewall.sambasharewan.dest_port='137 138 139 445'
	uci set firewall.sambasharewan.dest_proto='tcpudp'
	uci set firewall.sambasharewan.target='DROP'

	uci set firewall.sambasharelan=rule
	uci set firewall.sambasharelan.src='lan'
	uci set firewall.sambasharelan.dest_port='137 138 139 445'
	uci set firewall.sambasharelan.dest_proto='tcpudp'
	uci set firewall.sambasharelan.target='ACCEPT'
	uci commit firewall
}

fix_mini_free_vm(){

        case "$model" in
		"AR150"|\
		"USB150"|\
                "MIFI")
			echo "vm.min_free_kbytes = 2813" >> /etc/sysctl.d/local.conf
			sysctl -p /etc/sysctl.d/local.conf
                        ;;
                *)
        esac
}

start(){
	echo "---Info: gl_init start... " >> /tmp/gldebuglog
	
	fix_board_info
	
	#fixme: when this script executed, wireless configuration was not built, we need to wait a little bit.
	while [ ! -e "/etc/config/wireless" ]; do
		[ "$model" = "mv1000" ] && break

		echo "---Warning: wireless was not built, wait and try... " >> /tmp/gldebuglog
		sleep 2
	done
	if [ "$model" = "X1200" ];then
		cnt=90
	else
		cnt=60
	fi
	counter=0
	devicenum=`uci show wireless | grep wifi-device | wc -l`
	while [ $devicenum != $(get_wifi_device_count) ]
	do
		[ "$model" = "mv1000" ] && break

		let counter=counter+1
		[ $counter = $cnt ] && {
			counter=0
			break
		}
		echo "---Warning:  wireless config was not generate, wait... $devicenum" >> /tmp/gldebuglog
		sleep 1
		devicenum=`uci show wireless | grep wifi-device | wc -l`
	done
	
	sleep 1
	check_firstime
	read_factory_data
	[ "$model" = "MV1000" ] && set_lan_mac mv1000

	if [ -n "$first_time" ]; then
		fix_ssid
		fix_sys
	fi
	
	#make this run if upgrade from old version and reserved settings
	if [ "$model" = "X1200" -o "$model" = "MT1300" -o "$model" = "MT300N-V2" ];then
		set_lan_mac $model
		uci commit network
		[ "$model" = "MT1300" ] && ethtool -i eth0 1>/dev/null; /etc/init.d/network restart &
	fi

	fix_misc
	fix_led
	fix_guest_network
	fix_samba
	fix_minidlna
	fix_mini_free_vm

	sync

	/etc/init.d/uhttpd disable
	/etc/init.d/gl_init disable
	/etc/init.d/ipsec disable 
	/etc/init.d/xl2tpd disable
	dnscrypt=`uci get glconfig.general.dnscrypt_proxy 2>/dev/null`
	[ "$dnscrypt" != "1" ] && /etc/init.d/dnscrypt-proxy disable

	echo "---Info: gl_init complete... " >> /tmp/gldebuglog
}

