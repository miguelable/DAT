#!/bin/sh  /etc/rc.common

. /lib/functions.sh
. /lib/functions/network.sh
. /lib/mwan3/mwan3.sh

START=60
USE_PROCD=1

#delete rule
delete_rule()
{
	if [ $num = 0 ];then
		iptables -t mangle -D PREROUTING -j QOS_UP 1>/dev/null 2>&1
		iptables -t mangle -F QOS_UP 1>/dev/null 2>&1
		iptables -t mangle -X QOS_UP 1>/dev/null 2>&1

		iptables -t mangle -D POSTROUTING -j QOS_CLASS 1>/dev/null 2>&1
		iptables -t mangle -F QOS_CLASS 1>/dev/null 2>&1
		iptables -t mangle -X QOS_CLASS 1>/dev/null 2>&1
		for WANIFACE in $WANIFACES;do
			tc qdisc del dev $WANIFACE root 1>/dev/null 2>&1
		done
	fi
	tc qdisc del dev $LANIFACE root 1>/dev/null 2>&1
}
#add rule 
add_rule()
{
	iptables -t mangle -N QOS_UP 1>/dev/null 2>&1
	iptables -t mangle -A PREROUTING -j QOS_UP 1>/dev/null 2>&1
	iptables -t mangle -N QOS_CLASS 1>/dev/null 2>&1
	iptables -t mangle -A POSTROUTING -j QOS_CLASS 1>/dev/null 2>&1
}
get_current_wan()
{
	ifaces=`mwan3_report_policies_v4 2>/dev/null | grep %  |  awk '{print $1}'`
	if [ "$ifaces" != "" ];then
		for iface in $ifaces;do
			tmpiface=`ifstatus $iface | jsonfilter -e @.l3_device`
			if [ "$tmpiface" != "wlan-sta0" ];then
				if [ "$WANIFACES" = "" ];then
					WANIFACES=$tmpiface
				else
					WANIFACES="$WANIFACES $tmpiface"
				fi
			fi	
		done
	else
		WANIFACES=`ip route get 8.8.8.8 | awk '{print $5}'`
		if [ "$WANIFACES" = "wlan-sta0" ];then
			WANIFACES=""
		fi
	fi
}
get_wan_interface()
{
	vpnflag=`uci get glconfig.openvpn.enable 2>/dev/null`
	if [ "$vpnflag" = "1" ];then
		WANIFACES=tun0
		return 0
	fi
	wgflag=`uci get wireguard.@proxy[0].enable 2>/dev/null`
	if [ "$wgflag" = "1" ];then
		WANIFACES=wg0
		return 0
	fi
	get_current_wan
	
	[ -n "$WANIFACES" ] && return 0
	WANIFACES=`uci get network.wan.ifname 2>/dev/null`
	[ -n "$WANIFACES" ] && return 0
	WANIFACES=`uci get network.wan1.ifname 2>/dev/null`
	[ -n "$WANIFACES" ] && return 0
	#WANIFACES=`uci get network.wwan.ifname 2>/dev/null`
	#[ -n "$WANIFACES" ] && return 0
	WANIFACES=`uci get network.tethering.ifname 2>/dev/null`
	[ -n "$WANIFACES" ] && return 0
	allbus=`uci get glconfig.modem.bus 2>/dev/null`
	for bus in ${allbus}
	do
		tmp=${bus/-/_}
		tbus=${tmp/./_}
		tmpiface=`uci get network.modem${tbus}.ifname 2>/dev/null`
		if [ "$WANIFACES" = "" ];then
			WANIFACES=$tmpiface
		else
			WANIFACES="$WANIFACES $tmpiface"
		fi
	done
}
get_lan_ip()
{
	lanip=`ifconfig br-lan | grep Bcast | awk '{print $2}' | cut -f2 -d ":"`
	if [ "$lanip" = "" -o "$lanip" = " " ];then
		lanip=`uci get network.lan.ipaddr 2>/dev/null`
		if [ "$lanip" = "" -o "$lanip" = " " ];then
			lanip="192.168.8.1"
		fi
	fi
	#guestip
	guestip=`ifconfig br-guest | grep Bcast | awk '{print $2}' | cut -f2 -d ":"`
	if [ "$guestip" = "" -o "$guestip" = " " ];then
		guestip=`uci get network.guest.ipaddr 2>/dev/null`
		if [ "$guestip" = "" -o "$guestip" = " " ];then
			guestip="192.168.9.1"
		fi
	fi
}
qos_func()
{
	local qos=$1
	local mac
	local uload
	local dload
	local dmac1
	local dmac2

	config_get mac $1 "mac"
	config_get uload $1 "upload"
	config_get dload $1 "download"
	#echo "qos=$qos mac=$mac lanip=$lanip uload=$uload dload=$dload" >/dev/console
	if [ "$mac" != "" -o "$mac" != " " ];then
		if [ "$addfirst" = "1" -o "$addfirst" = 1 ];then
			addfirst=0
			delete_rule
			if [ $num = 0 ];then
				add_rule
			fi
			#add download
			$TCQD root handle 100: cbq bandwidth $DSPEED avpkt 1000
			$TCCD parent 100:0 classid 100:1 cbq bandwidth $DSPEED rate $DSPEED allot 1514 weight $DSPEED prio 4 cell 8 maxburst 8 avpkt 1000 bounded
			#add upload
			if [ $num = 0 ];then
				$TCQU root handle 200: cbq bandwidth $USPEED avpkt 1000
				$TCCU parent 200:0 classid 200:1 cbq bandwidth $USPEED rate $USPEED allot 1514 weight $USPEED prio 4 cell 8 maxburst 8 avpkt 1000 bounded
			fi
			#add lanip rule
			$TCFD parent 100:0 protocol ip prio 1 u32 match ip src $lanip flowid 100:1
			if [ $num = 0 ];then
				$TCFU parent 200:0 protocol ip prio 1 u32 match ip src $lanip flowid 200:1
			fi
		fi
		i=`expr $i + 1`
		mark=$i
		#download set
		if [ "$dload" != "" -o "$dload" != " " ];then
			dmac1="0x"`echo $qos | cut -c1-4`
			dmac2="0x"`echo $qos | cut -c5-12`
			#echo "dmac1=$dmac1 dmac2=$dmac2 i=$i mark=$mark"
			$TCCD parent 100:1 classid 100:$mark cbq bandwidth $DSPEED rate ${dload}kbps allot 1514 weight 100Kbit prio 5 cell 8 maxburst 8 avpkt 1000 bounded
			$TCQD parent 100:$mark sfq quantum 1514b perturb 10
			$TCFD parent 100:0 protocol ip prio 5 u32 match u16 0x0800 0xffff at -2 match u32 $dmac2 0xffffffff at -12 match u16 $dmac1 0xffff at -14 flowid 100:$mark
		fi
		#upload set
		if [ $num = 0 ];then
			if [ "$uload" != "" -o "$uload" != " " ];then
				$TCCU parent 200:1 classid 200:$mark cbq bandwidth $USPEED rate ${uload}kbps allot 1514 weight 100Kbit prio 5 cell 8 maxburst 8 avpkt 1000 bounded
				$TCQU parent 200:$mark sfq quantum 1514b perturb 10
				$TCFU parent 200:0 protocol ip prio 5 handle $mark fw classid 200:$mark 
				$IPT -m mac --mac-source $mac -j MARK --set-mark $mark/0xff
				#$IPT -m mac --mac-source $mac -j RETURN
				for WANIFACE in $WANIFACES;do
					$IPTC -o $WANIFACE -m mark --mark $mark/0xff -j CLASSIFY --set-class 200:$mark
				done
			fi
		fi
	fi
}
service_triggers()
{
	procd_add_reload_trigger glqos
}

start_service()
{
	mode=`uci get glconfig.bridge.mode 2>/dev/null`
	if [ "$mode" = "ap" -o "$mode" = "wds" -o "$mode" = "relay" ];then
		exit 1
	fi

	while [ 1 ];do                                          
		[ ! -f /var/run/glqos.lock ] && break           
		sleep 1                      
	done                                                            
	touch /var/run/glqos.lock

	local DSPEED="1000Mbit"
	local USPEED="1000Mbit"
	local LANIFACE="br-lan"
	local addfirst=1
	local mark=1
	local i=1
	local lanip
	local guestip
	local WANIFACE
	local WANIFACES

	local enable
	enable=`uci get glconfig.traffic_control.enable 2>/dev/null`
	if [ "$enable" = "1" ];then
		
		#get current wan interface
		get_wan_interface
		#get lan ip
		get_lan_ip
		#echo "lanip=$lanip WANIFACE=$WANIFACE"
		gflag=`uci get wireless.guest2g.guest 2>/dev/null`
		g5flag=`uci get wireless.guest5g.guest 2>/dev/null`
		if [ "$gflag" = "1" -o "$g5flag" = "1" ];then
			tnum="0 1"
		else
			tnum=0
		fi
		for num in ${tnum}
		do
			if [ $num = 1 ];then
				addfirst=1
				LANIFACE="br-guest"
				lanip=$guestip
			fi
			TCQD="tc qdisc add dev $LANIFACE"
			TCCD="tc class add dev $LANIFACE"
			TCFD="tc filter add dev $LANIFACE"
			if [ $num = 0 ];then
				for WANIFACE in $WANIFACES;do
					TCQU="tc qdisc add dev $WANIFACE"
					TCCU="tc class add dev $WANIFACE"
					TCFU="tc filter add dev $WANIFACE"
				done
				IPT="iptables -t mangle -A QOS_UP"
				IPTC="iptables -t mangle -A QOS_CLASS"
			fi

			config_load glqos
			config_foreach qos_func qos
		done
		#echo f >/proc/net/nf_conntrack
	fi
	rm /var/run/glqos.lock -rf
}
stop_service()
{
	while [ 1 ];do                                          
		[ ! -f /var/run/glqos.lock ] && break           
		sleep 1                      
	done                                                            
	touch /var/run/glqos.lock

	local LANIFACE="br-lan"
	local WANIFACE
	local WANIFACES
	local num
	get_wan_interface
	#echo "LANIFACE=$LANIFACE WANIFACE=$WANIFACE"
	for num in $(seq 0 1)
	do
		if [ $num = 1 ];then
			LANIFACE="br-guest"
		fi
		delete_rule
	done
	#echo f >/proc/net/nf_conntrack
	rm /var/run/glqos.lock -rf
}

