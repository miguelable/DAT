#!/bin/sh   /etc/rc.common

. /lib/functions.sh
. /lib/functions/gl_util.sh

START=99
#USE_PROCD=1
#PROC="/usr/bin/wg"
WFILE="/var/etc/wireguard_server.conf"

model=$(get_model)
guest_exist=$(check_guest_network_exist)
openwrt_version=$(cat /etc/os-release |grep "VERSION_ID="|cut -d '"' -f 2)

servers_func()
{
	local name

	config_get name $1 "name" 
	config_get local_port $1 "local_port" 
	config_get local_ip $1 "local_ip" 
	config_get local_ipv6 $1 "local_ipv6"
	config_get private_key $1 "private_key" 
	config_get enable $1 "enable" 
	#echo "name=$name local_port=$local_port local_ip=$local_ip enable=$enable"
	
	if [ "$enable" == "1" ];then
		echo "[Interface]" >"$WFILE"
		[ -n "$local_port" ] && echo -e "ListenPort = $local_port" >>"$WFILE"
		[ -n "$private_key" ] && echo -e "PrivateKey = $private_key\n" >>"$WFILE"
	else
		#echo "server_func enable=0 exit"
		rm /var/run/glwgserver.lock -rf
		exit 1
	fi 
}
peers_func()
{
	local name 
	local publickey
	local allow_ip
	local subnet

	config_get name $1 "name"	
	config_get publickey $1 "client_key"
	config_get allow_ip $1 "client_ip"	
	config_get subnet $1 "subnet"	""
	#echo "name=$name publickey=$publickey allow_ip=$allow_ip allowed=$allowed"
	echo -e "[Peer]" >>"$WFILE"
	[ -n "$publickey" ] && echo -e "PublicKey = $publickey" >>"$WFILE"
	if [ -n "$subnet" ];then
		[ -n "$allow_ip" ] && echo "AllowedIPs = ${allow_ip}" >> "${WFILE}"

		for allowed_ip in ${subnet}; do
			echo "AllowedIPs = ${allowed_ip}" >> "${WFILE}"
		done

		subnet_list="$subnet_list $subnet"
	else
		[ -n "$allow_ip" ] && echo -e "AllowedIPs = $allow_ip" >> "$WFILE"
	fi
	echo -e "PersistentKeepalive = 25\n" >>"$WFILE"
}	
wireguard_add_firewall()
{
	local access=$(uci get wireguard_server.@servers[0].access)
	#echo "firewall local_port=$local_port"
	# Listen Port Tcp/UDP
	uci set firewall.AllowWireguard='rule'
	uci set firewall.AllowWireguard.name='Allow-Wireguard'
	uci set firewall.AllowWireguard.target='ACCEPT'
	uci set firewall.AllowWireguard.src='wan'
	uci set firewall.AllowWireguard.proto='udp tcp'
	uci set firewall.AllowWireguard.family='ipv4'
	uci set firewall.AllowWireguard.dest_port="$local_port"
	#zone
	uci set firewall.wireguard='zone'
	uci set firewall.wireguard.name='wireguard'
	uci set firewall.wireguard.input=$access
	uci set firewall.wireguard.forward='DROP'
	uci set firewall.wireguard.output='ACCEPT'
	uci set firewall.wireguard.masq='1'
	uci set firewall.wireguard.mtu_fix='1'
	uci set firewall.wireguard.device='wg0'
	uci set firewall.wireguard.masq6='1'
	#forwarding wireguard to wan
	uci set firewall.wireguard_wan='forwarding'
	uci set firewall.wireguard_wan.src='wireguard'
	uci set firewall.wireguard_wan.dest='wan'
	#forwarding wireguard to lan
	uci set firewall.wireguard_lan='forwarding'	
	uci set firewall.wireguard_lan.src='wireguard'	
	uci set firewall.wireguard_lan.dest='lan'	
	[ "$access" != "ACCEPT" ] && {
		uci set firewall.wireguard_lan.enabled="0"
	}	
	#forwarding lan to wireguard
	uci set firewall.lan_wireguard='forwarding'
	uci set firewall.lan_wireguard.src='lan'
	uci set firewall.lan_wireguard.dest='wireguard'

	if [ -n "$guest_exist" ];then
		#forwarding guest to wireguard
		uci set firewall.guest_wireguard='forwarding'
		uci set firewall.guest_wireguard.src='guestzone'
		uci set firewall.guest_wireguard.dest='wireguard'
		#forwarding wireguard to guest
		uci set firewall.wireguard_guest='forwarding'
		uci set firewall.wireguard_guest.src='wireguard'
		uci set firewall.wireguard_guest.dest='guestzone'
	fi
	uci commit firewall
	/etc/init.d/firewall reload
}
wireguard_delete_firewall()
{
	
	uci delete firewall.AllowWireguard
	uci delete firewall.wireguard
	uci delete firewall.wireguard_wan
	uci delete firewall.wireguard_lan
	uci delete firewall.lan_wireguard
	if [ -n "$guest_exist" ];then
		uci delete firewall.guest_wireguard
		uci delete firewall.wireguard_guest
	fi

	uci commit firewall
	/etc/init.d/firewall reload
}
init_config()
{
	local enable
	rm -rf  $WFILE
	config_load wireguard_server
	config_foreach servers_func servers
	#echo "out enable=$enable"
	if [ "$enable" == "1" ];then
		ip link del dev wg0 1>/dev/null 2>&1 || true
		#echo "in enable=$enable"
		config_foreach peers_func peers
	fi
}
#service_triggers()
#{
#	procd_add_reload_trigger wireguard_server
#}
start()
{
	while [ 1 ];do                                          
		[ ! -f /var/run/glwgserver.lock ] && break           
		sleep 1                      
	done                                                            
	touch /var/run/glwgserver.lock
	
	local local_ip
	local local_port
	local subnet_list
	local mode6=$(uci get glipv6.lan.mode)
	local ipv6_status="$(ifstatus wan6 2>/dev/null|grep '\"up\": true')"
	local ipv6_enable="$(uci get glipv6.globals.enabled)"

	init_config

	local interface=`uci -q get system.@led[1].dev`
	[ "$model" = "mv1000" ] && [ "$interface" != "wg0" ] &&{
        uci set system.@led[1].dev='wg0'
        uci commit system

        sleep 1

        /etc/init.d/system restart >> /dev/null    
        /etc/init.d/led restart >> /dev/null   
    }

	wireguard_add_firewall
	#echo "start local_ip=$local_ip"
	ip link add dev wg0 type wireguard
	ip addr add "$local_ip"/24 dev wg0
	if [ "$mode6" != "relay" -a "$ipv6_status" != "" -a "$ipv6_enable" = "1" ];then
		ip -6 addr add "$local_ipv6"/64 dev wg0
	fi
	ip link set up dev wg0

	#test timeout usage
	timeout -t 5 pwd 1>/dev/null 2>&1
	if [ "$?" = 1 ];then
		timeout 5 wg setconf wg0 $WFILE
	else
		timeout -t 5 wg setconf wg0 $WFILE
	fi

	runflag=`echo $?`
	if [ "$runflag" != 0 ];then
		ip link del wg0
		wireguard_delete_firewall
		rm -rf $WFILE
		rm /var/run/glwgserver.lock -rf
		exit 1
	fi
	
	for s in $subnet_list;do
		ip route add $s dev wg0
	done
	env -i ACTION="ifup" INTERFACE="wg" DEVICE="wg0" /sbin/hotplug-call iface 
	rm /var/run/glwgserver.lock -rf
}
proxy_func()
{
	config_get enable $1 "enable" 
}
stop()
{
	while [ 1 ];do                                          
		[ ! -f /var/run/glwgserver.lock ] && break           
		sleep 1                      
	done                                                            
	touch /var/run/glwgserver.lock
	
	local enable

	config_load wireguard
	config_foreach proxy_func proxy
	if [ "$enable" == "1" ];then
		rm /var/run/glwgserver.lock -rf
		exit 1
	fi
	
	wireguard_delete_firewall
	ip link del dev wg0 1>/dev/null 2>&1
	rm $WFILE -rf
	env -i ACTION="ifdown" INTERFACE="wg" DEVICE="wg0" /sbin/hotplug-call iface 
	rm /var/run/glwgserver.lock -rf
}
restart()
{
	stop
	start
}
