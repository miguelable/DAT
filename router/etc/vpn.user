#!/bin/sh
#
# This file is interpreted as shell script.
# Put your custom mwan3 action here, they will
# be executed with each netifd hotplug interface event
# on interfaces for which mwan3 is enabled.
#
# There are three main environment variables that are passed to this script.
#
# $ACTION
#      <ifup>         Is called by netifd and mwan3track
#      <ifdown>       Is called by netifd and mwan3track
#      <connected>    Is only called by mwan3track if tracking was successful
#      <disconnected> Is only called by mwan3track if tracking has failed
# $INTERFACE	Name of the interface which went up or down (e.g. "wan" or "wwan")
# $DEVICE	Physical device name which interface went up or down (e.g. "eth0" or "wwan0")

. /lib/functions.sh
. /lib/functions/network.sh

refresh_route() {
	local ip
	local gw
	local dev
	local inet
	local iface
	local device
	local server="$1"

	# Invalid ip address, return
	[ -n "$(echo $server | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')" ] || return 0

	# Check mwan3 is enabled or not
	iface=$(cat /var/run/mwan3/indicator 2>/dev/null || echo "unknown")
	[ "$iface" = "unknown" ] && {
		tmpiface="wan wwan modem tethering"
		tmpinterface=`echo $INTERFACE | cut -f1 -d_`
		for inet in $tmpiface; do
			[ "$inet" = "$INTERFACE" -o "$inet" = "$tmpinterface" ] && {
				iface="$INTERFACE"
				break
			}
		done
	}

	# Check again
	[ "$iface" = "unknown" ] && return 0

	network_get_device device $iface
	network_get_gateway gw $iface

	dev=$(ip route list $server | sed 's/.*dev \(.*\)/\1/')
	[ -n "$dev" ] && {                                     
		[ "$dev" = "$device" ] && return 0
		ip route del $server 2>/dev/null  
	}

	[ -n "$device" ] && {
		if [ -n "$gw" ]; then
			ip route add $server via $gw dev $device 2>/dev/null
		else
			ip route add $(ip route show dev $device | sed "s/default/$server/g" | head -n 1) 2>/dev/null || true
		fi
	}
}

refresh_local_policy() {
	local policy=`uci get glconfig.route_policy.enable`
	if [ "$policy" != "1" ];then
		local local_ip=`ifconfig $1 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
		local route_ip=`ip rule list table 53| grep -m 1 -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
		if [ -n "$local_ip" -a "$local_ip" != "$route_ip" ];then
			ip route flush table 53
			ip rule del table 53
			ip rule add from $local_ip lookup 53 pref 53 
		fi
		# refresh route
		ip route flush table 53
		route="$(ip route)"
		IFS_sav=$IFS
		IFS=$'\n\n'
		for line in $route
		do
		IFS=$IFS_sav
		if [ ! -n "$(echo "$line"|grep -w -e tun0 -e wg0)" ];then
			ip route add $line table 53
		fi
		IFS=$'\n\n'
		done
		IFS=$IFS_sav
		vpn_dns=$(cat /tmp/resolv.conf.vpn | grep -m 1 -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
		ip route add $vpn_dns dev $1 table 53
	fi
}

wg_main() {
	local ip
	local host
	local enable

	enable=$(uci get wireguard.@proxy[0].enable)
	[ "$enable" = "1" ] || return 

	host=$(uci get wireguard.@proxy[0].host)
	[ -n "$host" ] || return

	ip=$(echo $host | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')

	[ -n "$ip" ] && {
		refresh_route $ip
	}

	local DDNS=$(iptables -nL -t mangle | grep WG_DDNS)
	local lanip=$(uci get network.lan.ipaddr)
	local gateway=${lanip%.*}.0/24                  
	if [ -n "$DDNS" ];then       
			ip rule del fwmark 0x60000/0x60000 lookup 31 pref 31
			iptables -t mangle -D PREROUTING -j WG_DDNS         
			iptables -t mangle -F WG_DDNS                       
			iptables -t mangle -X WG_DDNS                                       
	fi                                                                                         
	iptables -t mangle -N WG_DDNS        
	iptables -A WG_DDNS -t mangle -i br-lan -s $gateway -d $ip -j MARK --set-mark 0x60000
	iptables -t mangle -I PREROUTING -j WG_DDNS                                          
	ip rule add fwmark 0x60000/0x60000 lookup 31 pref 31                                 
	ip route add $ip dev wg0 table 31  

	#refresh_local_policy wg0
}

ovpn_enable() {
	local enable

	if [ "$eanble" = "1" ]; then
		return 0
	else
		return 1
	fi
}

ovpn_main() {
	local ip
	local host
	local enable

	eanble=$(uci get glconfig.openvpn.enable 2>/dev/null)
	[ "$eanble" = "1" ] || return

	# Load default rules
	if [ "$INTERFACE" = "ovpn" ]; then
		# add default rules and force to main table
		[ -z "$(ip route list | grep -E "0.0.0.0/1 (.*) $DEVICE" 2>/dev/null)" ] && {
			ip route add 0.0.0.0/1 dev $DEVICE 2>/dev/null
			ipset add mwan3_connected_v4 0.0.0.0/1 2>/dev/null
		}
		[ -z "$(ip route list | grep -E "128.0.0.0/1 (.*) $DEVICE" 2>/dev/null)" ] && {
			ip route add 128.0.0.0/1 dev $DEVICE 2>/dev/null
			ipset add mwan3_connected_v4 128.0.0.0/1 2>/dev/null
		}
	fi

	host=$(uci get glconfig.openvpn.host 2>/dev/null)
	[ -n "$host" ] || return

	ip=$(echo $host | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')

	[ -n "$ip" ] && {
		refresh_route $ip
	}

	# check tap mode
	bridge=`uci show network.lan.ifname | grep tap`
	if [ -n "$bridge" ];then
			tap=`brctl show | grep tap`
			if [ -z "$tap" ];then
					brctl addif br-lan tap0
			fi
	fi

	#refresh_local_policy tun0
}

restore_default_route() {
	local iface 
	local gw
	# Check default route/some ovpn delete default route
	if [ "$INTERFACE" = "ovpn" -a "$ACTION" = "ifdown" ];then
		[ -z "$(ip route | grep default)" ] && {
			iface=$(ifstatus wan | jsonfilter -e '@.device')
			gw=$(ifstatus wan | jsonfilter -e '@["route"][0].nexthop')
			ip route add default dev $iface via $gw
		}
	fi
}

main() {
	wg_main
	ovpn_main
	restore_default_route
}

main

exit 0
